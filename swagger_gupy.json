{
    "openapi": "3.0.0",
    "info": {
        "title": "Gupy Public API",
        "version": "1.0.0",
        "description": "You may use __fields=all__ to retrieve all fields,\n                      but be aware that new fields might be included without further notice."
    },
    "servers": [
        {
            "url": "https://api.gupy.io/api/v1"
        }
    ],
    "paths": {
        "/jobs/{jobId}/applications": {
            "get": {
                "summary": "Listing applications",
                "tags": [
                    "Applications"
                ],
                "description": "Returns a list of candidate applications.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findApplications",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Application ID, queries passing this parameter will have higher request limit",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Current application status",
                        "schema": {
                            "type": "string",
                            "maxLength": 500,
                            "enum": [
                                "in_process",
                                "give_up",
                                "reproved",
                                "hired"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "currentStep.name",
                        "description": "Current step name of the candidate application in the job (eg. Cadastro)",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "candidate.identificationDocument",
                        "description": "Candidate identification document (CPF or other) (eg. 99999999999)",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "vacancyCode.code",
                        "description": "Vacancy code associated to the candidate (after hiring)",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Sorting order. The following fields are available: id, score, createdAt",
                        "schema": {
                            "type": "string",
                            "default": "id asc"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,candidate.name or fields=all)\\\nDefault: id, score, createdAt, updatedAt, endedAt, tags, partnerName,\njob.id, job.name, currentStep.id, currentStep.name, candidate.id,\ncandidate.name, candidate.lastName, candidate.email, candidate.birthdate,\ncandidate.identificationDocument,\ncandidate.linkedinProfileUrl, candidate.gender, candidate.mobileNumber,\ncandidate.phoneNumber, manualCandidate.id, manualCandidate.name,\nmanualCandidate.lastName, manualCandidate.email,\nmanualCandidate.mobileNumber, manualCandidate.linkedinProfileUrl,\nmanualCandidate.insertionSource, candidate.academicQualification.id,\ncandidate.academicQualification.formation,\ncandidate.academicQualification.institution,\ncandidate.academicQualification.course,\ncandidate.academicQualification.status,\ncandidate.academicQualification.startMonth,\ncandidate.academicQualification.startYear,\ncandidate.academicQualification.endMonth,\ncandidate.academicQualification.endYear\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of candidates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedApplication"
                                }
                            }
                        },
                        "headers": {
                            "X-RateLimit-Limit": {
                                "$ref": "#/components/headers/X-RateLimit-Limit"
                            },
                            "X-RateLimit-Remaining": {
                                "$ref": "#/components/headers/X-RateLimit-Remaining"
                            },
                            "X-RateLimit-Reset": {
                                "$ref": "#/components/headers/X-RateLimit-Reset"
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "post": {
                "summary": "Creating an application",
                "tags": [
                    "Applications"
                ],
                "description": "Creates a new application, given the job and the candidate. You can create the application using the candidate id (when the candidate is already assigned for another job) or making a manual insertion of the candidate (when there is no information about the candidate yet).",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Application to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/applicationPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the application",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/applicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}": {
            "patch": {
                "summary": "Moving an application",
                "tags": [
                    "Applications"
                ],
                "description": "Moves an application to another step of the job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "patchApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Step to be moved to",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "currentStepId": {
                                        "description": "Step to be moved to",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "status": {
                                        "description": "New status of application",
                                        "type": "string",
                                        "enum": [
                                            "in_process",
                                            "reproved"
                                        ],
                                        "maxLength": 255
                                    },
                                    "disapprovalReasonNotes": {
                                        "description": "Disapproval reason notes",
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "disapprovalReason": {
                                        "description": "Disapproval reason",
                                        "type": "string",
                                        "enum": [
                                            "hired_by_another_company",
                                            "invited_to_another_process",
                                            "missed_steps_of_process",
                                            "insufficient_knowledge",
                                            "hiring_not_allowed",
                                            "incompatible_curriculum",
                                            "gave_up_for_personal_reasons",
                                            "inconsistent_admission_docs",
                                            "elevated_wage_expectation",
                                            "lack_of_culture_alignment",
                                            "insufficient_academic_background",
                                            "no_potential_for_growth",
                                            "overqualified",
                                            "insufficient_seniority",
                                            "fulfilled_vacancy",
                                            "reject_at_medical_exam",
                                            "candidate_outside_required_location",
                                            "test_result_below_cutoff",
                                            "not_respond_to_contacts",
                                            "proposal_not_accepted",
                                            "hired_in_another_job",
                                            "lack_of_professional_experience",
                                            "little_stability_in_previous_companies",
                                            "medical_report_disqualified",
                                            "incomplete_screening_stage",
                                            "incomplete_registration_step",
                                            "other_reason"
                                        ],
                                        "maxLength": 255
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful move of the application",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/applicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/invites": {
            "post": {
                "summary": "Inviting the candidate",
                "tags": [
                    "Applications"
                ],
                "description": "After you create an application, you might want to send an invite to an application.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createInvite",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A confirmation of successfully creation of the invite"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/tags": {
            "put": {
                "summary": "Adding tags to application",
                "tags": [
                    "Applications"
                ],
                "description": "Creates a tag on a candidate application at a specific job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "tagApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Tag that will be inserted",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "maxLength": 120
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the tag",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "delete": {
                "summary": "Deleting an application tag by tag value",
                "tags": [
                    "Applications"
                ],
                "description": "Deletes an application tag using tag value.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteTagByName",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "value of tag",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the tag"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "get": {
                "summary": "Listing application tags",
                "tags": [
                    "Applications"
                ],
                "description": "Returns a list of application tags.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findApplicationTags",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Tag id to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Tag name to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of application tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedApplicationTags"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/hiring-information": {
            "patch": {
                "summary": "Update hiring information",
                "tags": [
                    "Applications"
                ],
                "description": "Send information about application hiring.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateHiringInformation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Hiring information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/hiringInformation"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "A confirmation of successfully update of hiring information"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "get": {
                "summary": "Find hiring information",
                "tags": [
                    "Applications"
                ],
                "description": "Returns application hiring information.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findHiringInformation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hiring information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/hiringInformation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/career-pages": {
            "get": {
                "summary": "Listing career pages",
                "tags": [
                    "Company Career Pages"
                ],
                "description": "Returns a list of company career pages.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findCareerPages",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name,siteUrl or fields=all).\\\nDefault: id, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Career page id to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Career page name to search for",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of career pages",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedCareerPage"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/departments": {
            "get": {
                "summary": "Listing departments",
                "tags": [
                    "Company Departments"
                ],
                "description": "Returns a list of company departments.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getDepartments",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Department id to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Department name to search for",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Department code to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 200
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of departments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedDepartment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "post": {
                "summary": "Creating a department",
                "tags": [
                    "Company Departments"
                ],
                "description": "Creates a new department.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createDeparment",
                "requestBody": {
                    "description": "Department to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/departmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the department",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/department"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/departments/{departmentId}": {
            "put": {
                "summary": "Updating a department",
                "tags": [
                    "Company Departments"
                ],
                "description": "Updates a department.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateDeparment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "departmentId",
                        "description": "Department ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Department to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/departmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the department",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/department"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/job-custom-fields": {
            "get": {
                "summary": "Listing custom fields of a company for job creation",
                "tags": [
                    "Job Custom Fields"
                ],
                "description": "Returns a list of custom fields of a company.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findCompanyCustomFields",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Custom field ID",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "label",
                        "description": "Custom field label to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of custom fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customFields"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/job-templates/{jobTemplateId}/custom-fields": {
            "get": {
                "summary": "Listing custom-fields of a job template",
                "tags": [
                    "Job Templates"
                ],
                "description": "Returns a list of custom fields of a job template.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findTemplateCustomFields",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobTemplateId",
                        "description": "Job template ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of job template custom fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/jobTemplateCustomFields"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/job-templates": {
            "get": {
                "summary": "Listing jobs templates",
                "tags": [
                    "Job Templates"
                ],
                "description": "Returns a list of job templates.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "list",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Job Template ID",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Job template name to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Job type to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "vacancy_type_apprentice",
                                "vacancy_type_associate",
                                "vacancy_type_talent_pool",
                                "vacancy_type_effective",
                                "vacancy_type_internship",
                                "vacancy_type_summer",
                                "vacancy_type_temporary",
                                "vacancy_type_outsource",
                                "vacancy_type_trainee",
                                "vacancy_type_volunteer",
                                "vacancy_legal_entity",
                                "vacancy_type_lecturer",
                                "vacancy_type_freelancer",
                                "vacancy_type_autonomous"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "careerPageId",
                        "description": "Career page ID to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "description": "Role ID to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=name,id,createdAt or fields=all).\\\nDefault: id, name, type, roleId, roleName, departmentId, departmentName,\n         branchId, branchName\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of job templates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedJobTemplates"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs": {
            "post": {
                "summary": "Creating a job",
                "tags": [
                    "Jobs"
                ],
                "description": "Creates a new job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createJob",
                "requestBody": {
                    "description": "Job to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/jobPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the job",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/job"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "get": {
                "summary": "Listing jobs",
                "tags": [
                    "Jobs"
                ],
                "description": "Returns a list of jobs.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findJobs",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Job ID",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Job posting code to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Job name to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Current job status to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "draft",
                                "waiting_approval",
                                "approved",
                                "disapproved",
                                "published",
                                "frozen",
                                "closed",
                                "canceled"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Job type to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "vacancy_type_apprentice",
                                "vacancy_type_associate",
                                "vacancy_type_talent_pool",
                                "vacancy_type_effective",
                                "vacancy_type_internship",
                                "vacancy_type_summer",
                                "vacancy_type_temporary",
                                "vacancy_type_outsource",
                                "vacancy_type_trainee",
                                "vacancy_type_volunteer",
                                "vacancy_legal_entity",
                                "vacancy_type_lecturer",
                                "vacancy_type_freelancer",
                                "vacancy_type_autonomous"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "publicationType",
                        "description": "Job publication type to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "external",
                                "internal"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "careerPageId",
                        "description": "Career Page ID to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "vacancyCode",
                        "description": "Vacancy code of the job to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "description": "Role ID to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "addressState",
                        "description": "Address State of the job to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=name,id,code or fields=all).\\\nDefault: id, code, name, type, publicationType, status, numVacancies,\nroleId, roleName, departmentId, departmentName\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of jobs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedJob"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}/custom-fields": {
            "get": {
                "summary": "Listing custom fields of a job",
                "tags": [
                    "Jobs"
                ],
                "description": "Returns a list of custom fields of a job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findCustomFields",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of job custom fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/jobCustomFields"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}/steps": {
            "get": {
                "summary": "Listing steps of a job",
                "tags": [
                    "Jobs"
                ],
                "description": "Returns a list of job steps ordered by step order.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findSteps",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Step type to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "online",
                                "offline",
                                "registration",
                                "hiring",
                                "pre_hiring"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, type, endDate, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of job steps",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedJobStep"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}": {
            "patch": {
                "summary": "Updating a job",
                "tags": [
                    "Jobs"
                ],
                "description": "Updates an existing job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateJob",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Job to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/jobPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the job",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/job"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "delete": {
                "summary": "Deleting a draft job",
                "tags": [
                    "Jobs"
                ],
                "description": "Deletes a draft job.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteJobHandler",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the job"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "summary": "Listing roles",
                "tags": [
                    "Job Roles"
                ],
                "description": "Returns a list of job roles.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getRoles",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Role id to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Role name to search for",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Role code to search for",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of roles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "post": {
                "summary": "Creating a role",
                "tags": [
                    "Job Roles"
                ],
                "description": "Creates a new job role.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createRole",
                "requestBody": {
                    "description": "Role to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/roleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the role",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/roles/{roleId}": {
            "put": {
                "summary": "Updating a role",
                "tags": [
                    "Job Roles"
                ],
                "description": "Updates a job role.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateRole",
                "parameters": [
                    {
                        "in": "path",
                        "name": "roleId",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Role to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/roleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the role",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/role"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/user-access-profiles": {
            "get": {
                "summary": "Listing user access profiles",
                "tags": [
                    "Company Users"
                ],
                "description": "Returns a list of user access profiles.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findUserAccessProfiles",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, permissions, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Profile id to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Profile name to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of access profiles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedUserAccessProfile"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "summary": "Creating an user",
                "tags": [
                    "Company Users"
                ],
                "description": "Creates a new company user.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createUser",
                "requestBody": {
                    "description": "User to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/companyUserPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "get": {
                "summary": "Listing users",
                "tags": [
                    "Company Users"
                ],
                "description": "Returns a list of company users.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getUsers",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "User id to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "User email to search for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "departmentId",
                        "description": "User departmentId to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "roleId",
                        "description": "User roleId to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "profileTestEnabled",
                        "description": "Profile test enabling to search for",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "User type to search for",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "root",
                                "owner",
                                "guest"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "profileTestStatus",
                        "description": "Test status to search for",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                "not_started",
                                "in_progress",
                                "finished",
                                "not_selected"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "testStatus",
                        "description": "External profile test status to search for",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                "not_started",
                                "in_progress",
                                "finished",
                                "uninvited"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "taxpayerRegistry",
                        "description": "TaxpayerRegistry to search for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "countryOfOrigin",
                        "description": "countryOfOrigin to search for",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "User identifier to search for",
                        "schema": {
                            "type": "number",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of departments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/users/{userId}": {
            "put": {
                "summary": "Updating an user",
                "tags": [
                    "Company Users"
                ],
                "description": "Updates an existing company user.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/companyUserPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "delete": {
                "summary": "Deleting an user",
                "tags": [
                    "Company Users"
                ],
                "description": "Deletes an user.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the user"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/rating-criteria": {
            "get": {
                "summary": "Retrieving an application's rating criteria",
                "tags": [
                    "Applications"
                ],
                "description": "Returns the application's rating criteria, grouped by job criteria.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findApplicationRatingCriteria",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of the application's rating criteria, grouped by job criteria.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/criteriaRatingsArray"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/tags/{tagId}": {
            "delete": {
                "deprecated": true,
                "summary": "Deleting an application tag",
                "tags": [
                    "Applications"
                ],
                "description": "Deletes an application tag.\nDeprecated, use deletion by tag value instead\nWill be removed in api version 2\n",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteTag",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "tagId",
                        "description": "Tag ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the vacancy"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/comments": {
            "post": {
                "summary": "Creating a comment in candidate timeline",
                "tags": [
                    "Applications"
                ],
                "description": "Creates a comment in the candidate timeline, visible to company users.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createComment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Message options",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/applicationCommentPost"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/applicationComment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "get": {
                "summary": "Listing comments in candidate timeline",
                "tags": [
                    "Applications"
                ],
                "description": "Returns the list of comments in candidate timeline.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findComments",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful insertion of the comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedApplicationComment"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/applications/{applicationId}/messages": {
            "post": {
                "summary": "Creating and sending an email message to a candidate",
                "tags": [
                    "Applications"
                ],
                "description": "Creates and sends an email message based on a template to a candidate.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createMessage",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Message options",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/messageEmailSend"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successfull creation of the message"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/branches": {
            "post": {
                "summary": "Creating branches",
                "tags": [
                    "Company Branches"
                ],
                "description": "Creates a new branch.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createBranch",
                "requestBody": {
                    "description": "Branch to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/branchPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the branch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/branch"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            },
            "get": {
                "summary": "Listing branches",
                "tags": [
                    "Company Branches"
                ],
                "description": "Returns a list of company branches.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getBranches",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, code, name, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Branch id to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Branch name to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Branch code to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 200
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of branches",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedBranch"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/branches/{branchId}": {
            "delete": {
                "summary": "Deleting a branch",
                "tags": [
                    "Company Branches"
                ],
                "description": "Deletes a company branch.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteBranchHandler",
                "parameters": [
                    {
                        "in": "path",
                        "name": "branchId",
                        "description": "Branch ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the branch"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "put": {
                "summary": "Updating branches",
                "tags": [
                    "Company Branches"
                ],
                "description": "Updates a branch.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateBranch",
                "parameters": [
                    {
                        "in": "path",
                        "name": "branchId",
                        "description": "Branch ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Branch to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/branchPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the branch",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/branch"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            }
        },
        "/dismissals": {
            "post": {
                "summary": "Creating a dismissal",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Creates a new dismissal.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createDismissal",
                "requestBody": {
                    "description": "Dismissal to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/dismissalPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the dismissal",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dismissal"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "get": {
                "summary": "Listing dismissals",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Returns a list of dismissals of a company.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getDismissals",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,applicationId or fields=all).\\\nDefault: id, applicationId, date, reason, isRehired, rehiringReason, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Dismissal id to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "applicationId",
                        "description": "Application id from the dismissal to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of dismissals",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedDismissal"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/dismissals/{dismissalId}": {
            "put": {
                "summary": "Updating dismissals",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Updates a dismissal.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateDismissal",
                "parameters": [
                    {
                        "in": "path",
                        "name": "dismissalId",
                        "description": "Dismissal ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Dismissal to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/dismissalPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the dismissal",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dismissalPutRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/email-templates": {
            "get": {
                "summary": "Listing e-mail templates",
                "tags": [
                    "E-mail templates"
                ],
                "description": "Returns a list of e-mail templates.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findEmailTemplates",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,name or fields=all).\\\nDefault: id, name, subject, body, type, public, userId, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Template type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Template name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of e-mail templates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedEmailTemplate"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/company-employees": {
            "post": {
                "summary": "Create a list of company employees",
                "tags": [
                    "Company Employee"
                ],
                "description": "Create a list of company employees for internal recruitment",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createCompanyEmployees",
                "requestBody": {
                    "description": "Company Employees to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/companyEmployeePostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the company employees list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/companyEmployeePostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "get": {
                "summary": "Get a list of company employees",
                "tags": [
                    "Company Employee"
                ],
                "description": "Get a list of company employees for internal recruitment",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findCompanyEmployees",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "description": "company employee id",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "identificationDocument",
                        "description": "employee identification document number",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "employee name or partial name",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful get of the company employees list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedCompanyEmployee"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/company-employees/{employeeId}": {
            "delete": {
                "summary": "Deletes a company employee",
                "tags": [
                    "Company Employee"
                ],
                "description": "Deletes a company employee",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteCompanyEmployee",
                "parameters": [
                    {
                        "in": "path",
                        "name": "employeeId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the company employee",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteCompanyEmployeeResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "put": {
                "summary": "Update Company employee",
                "tags": [
                    "Company Employee"
                ],
                "description": "Update company employee for internal recruitment",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateCompanyEmployee",
                "parameters": [
                    {
                        "in": "path",
                        "name": "employeeId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Company Employees to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyEmployeeInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful insertion of the company employees list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyEmployee"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/close": {
            "put": {
                "summary": "Close jobs",
                "tags": [
                    "Jobs"
                ],
                "description": "Bulk close jobs",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "closeJobsHandler",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "jobIds": {
                                        "description": "Job ids to be closed",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "jobIds"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful closed jobs"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}/classifiers": {
            "post": {
                "summary": "Create a classifier",
                "tags": [
                    "Jobs"
                ],
                "description": "Create a classifier will evaluate the candidates",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createClassifier",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Classifier to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/classifierPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the classifier",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/classifier"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "get": {
                "summary": "List job classifiers",
                "tags": [
                    "Jobs"
                ],
                "description": "Return a list of job classifiers",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findClassifiers",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of job classifiers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedClassifiers"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/performance-evaluations": {
            "post": {
                "summary": "Creating a performance evaluation",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Creates a new performance evaluation.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createPerformanceEvaluation",
                "requestBody": {
                    "description": "Performance evaluation to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/performanceEvaluationPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the performance evaluation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/performanceEvaluation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            },
            "get": {
                "summary": "Listing performance evaluations",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Returns a list of performance evaluations of a company.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "getPerformanceEvaluations",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,applicationId or fields=all).\\\nDefault: id, applicationId, date, value, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "id",
                        "description": "Performance Evaluation id to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "applicationId",
                        "description": "Application id from the performance evaluations to filter",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of performance evaluations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedPerformanceEvaluation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/performance-evaluations/{performanceEvaluationId}": {
            "put": {
                "summary": "Updating performance evaluation",
                "tags": [
                    "Post Hiring"
                ],
                "description": "Updates a performance evaluation.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updatePerformanceEvaluation",
                "parameters": [
                    {
                        "in": "path",
                        "name": "performanceEvaluationId",
                        "description": "Performance evaluation ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Performance evaluation to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/performanceEvaluationPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the performance evaluation.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/performanceEvaluationPutRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/users/{userId}/invites": {
            "post": {
                "summary": "Inviting an user",
                "tags": [
                    "Company Users"
                ],
                "description": "Invites by e-mail an user to the Gupy platform.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "inviteUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Invite options",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "language": {
                                        "description": "Invite language",
                                        "type": "string",
                                        "maxLength": 2,
                                        "enum": [
                                            "en",
                                            "es",
                                            "pt"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful invitation of the user"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/jobs/{jobId}/vacancies": {
            "post": {
                "summary": "Creating a vacancy code",
                "tags": [
                    "Jobs"
                ],
                "description": "Creates a vacancy, with code and status.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createVacancy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Vacancy that will be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vacancyPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful insertion of the vacancy",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vacancy"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            },
            "get": {
                "summary": "Listing vacancy codes",
                "tags": [
                    "Jobs"
                ],
                "description": "Returns a list of job vacancies.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findVacancies",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Vacancy code to filter",
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,code or fields=all).\\\nDefault: id, code, status, errorMessage, createdAt, updatedAt\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of vacancies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedVacancy"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/jobs/{jobId}/vacancies/{vacancyId}": {
            "delete": {
                "summary": "Deleting a vacancy code",
                "tags": [
                    "Jobs"
                ],
                "description": "Deletes a vacancy.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteVacancy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "vacancyId",
                        "description": "Vacancy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the vacancy"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    }
                }
            },
            "put": {
                "summary": "Updating a vacancy code",
                "tags": [
                    "Jobs"
                ],
                "description": "Updates vacancy code, status and errorMessage.\n\nAn errorMessage must be provided when updating status to error, otherwise it\nmust be null.\n",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateVacancy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobId",
                        "description": "Job ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "vacancyId",
                        "description": "Vacancy ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Vacancy that will be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/vacancyPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful update of the vacancy",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vacancy"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                }
            }
        },
        "/webhooks": {
            "post": {
                "summary": "Configuring webhooks",
                "tags": [
                    "Webhook Configurations"
                ],
                "description": "Configure a webhook.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "createWebhook",
                "requestBody": {
                    "description": "Webhook to be configured",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/webhookPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "A confirmation of successful configuration of the webhook",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webhook"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "get": {
                "summary": "Listing webhook configurations",
                "tags": [
                    "Webhook Configurations"
                ],
                "description": "Returns a list of webhooks.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "findWebhooks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Specify fields to return (eg. fields=id,action or fields=all).\\\nDefault: id, action, postbackUrl\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/perPage"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of webhooks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/paginatedWebhook"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        },
        "/webhooks/{webhookId}": {
            "delete": {
                "summary": "Deleting webhook configurations",
                "tags": [
                    "Webhook Configurations"
                ],
                "description": "Deletes a webhook configuration.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "deleteWebhook",
                "parameters": [
                    {
                        "in": "path",
                        "name": "webhookId",
                        "description": "Webhook ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A confirmation of successful deletion of the webhook configuration"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            },
            "put": {
                "summary": "Updating webhook configurations",
                "tags": [
                    "Webhook Configurations"
                ],
                "description": "Updates a webhook configuration.",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "operationId": "updateWebhook",
                "parameters": [
                    {
                        "in": "path",
                        "name": "webhookId",
                        "description": "Webhook ID",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 255
                        }
                    }
                ],
                "requestBody": {
                    "description": "Webhook configuration to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/webhookPostRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "A confirmation of successful update of the webhook configuration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webhook"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "application": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Application ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "score": {
                        "description": "Candidate affinity score",
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "source": {
                        "description": "Source of the candidate",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "google",
                            "facebook",
                            "instagram",
                            "linkedin",
                            "whatsapp",
                            "indeed",
                            "catho",
                            "company_website",
                            "referral",
                            "university",
                            "github",
                            "telegram",
                            "other"
                        ]
                    },
                    "sourceOther": {
                        "description": "Source description for \"other\"",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Application current status",
                        "type": "string",
                        "enum": [
                            "in_process",
                            "give_up",
                            "reproved",
                            "hired"
                        ],
                        "maxLength": 255
                    },
                    "isCompanyEmployee": {
                        "description": "The candidate is a company employee",
                        "type": "boolean"
                    },
                    "employeeEmail": {
                        "description": "The candidate employee e-mail",
                        "type": "string",
                        "maxLength": 255
                    },
                    "registrationComplete": {
                        "description": "The registration step of application is complete",
                        "type": "boolean"
                    },
                    "referred": {
                        "description": "The candidate was referred",
                        "type": "boolean"
                    },
                    "referredBy": {
                        "description": "Name of the person who referred this candidate",
                        "type": "string",
                        "maxLength": 255
                    },
                    "referralStatus": {
                        "description": "Status of referral",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "pending",
                            "confirmed",
                            "rejected",
                            "unknown"
                        ]
                    },
                    "feedbackSent": {
                        "description": "A feedback was sent to the candidate",
                        "type": "boolean"
                    },
                    "matching": {
                        "description": "Candidate matching on the company's culture",
                        "type": "number",
                        "format": "double"
                    },
                    "disapprovalReason": {
                        "description": "Disapproval reason for reproved candidates",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "hired_by_another_company",
                            "invited_to_another_process",
                            "missed_steps_of_process",
                            "insufficient_knowledge",
                            "hiring_not_allowed",
                            "incompatible_curriculum",
                            "gave_up_for_personal_reasons",
                            "inconsistent_admission_docs",
                            "elevated_wage_expectation",
                            "lack_of_culture_alignment",
                            "insufficient_academic_background",
                            "no_potential_for_growth",
                            "overqualified",
                            "insufficient_seniority",
                            "fulfilled_vacancy",
                            "reject_at_medical_exam",
                            "candidate_outside_required_location",
                            "test_result_below_cutoff",
                            "not_respond_to_contacts",
                            "proposal_not_accepted",
                            "hired_in_another_job",
                            "lack_of_professional_experience",
                            "little_stability_in_previous_companies",
                            "medical_report_disqualified",
                            "incomplete_screening_stage",
                            "incomplete_registration_step",
                            "other_reason"
                        ]
                    },
                    "disapprovalReasonNotes": {
                        "description": "Disapproval reason note for reproved candidates when reason is other",
                        "type": "string",
                        "maxLength": 255
                    },
                    "hiringType": {
                        "description": "Type of candidate hiring",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "employee_admission",
                            "employee_readmission",
                            "employee_reintegration",
                            "unrelated_worker_hiring",
                            "internal_transfer"
                        ]
                    },
                    "hiringDate": {
                        "description": "Date of hiring",
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "endedAt": {
                        "description": "Date of disqualification if status is reproved, date of withdrawal if status is give_up or date of hiring if status is hired",
                        "type": "string",
                        "format": "date-time"
                    },
                    "partnerName": {
                        "description": "Name of the partner who created the application",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "99hunters",
                            "catho",
                            "facebook_jobs",
                            "geekhunter",
                            "glassdoor",
                            "google_for_jobs",
                            "indeed",
                            "indeed_sponsored",
                            "jooble",
                            "linkedin",
                            "netvagas",
                            "riovagas",
                            "trampos",
                            "gupy_opportunities",
                            "gupy_opportunities_recommended",
                            "gupy_public_page",
                            "gupy_public_page_event"
                        ]
                    },
                    "job": {
                        "description": "Job basic information.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Job ID",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "Job name",
                                "type": "string",
                                "maxLength": 255
                            },
                            "status": {
                                "description": "Status of the application step",
                                "type": "string",
                                "maxLength": 255,
                                "enum": [
                                    "approved",
                                    "done",
                                    "not_started",
                                    "started"
                                ]
                            }
                        }
                    },
                    "currentStep": {
                        "description": "Current application step basic information.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Step id",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "Step name",
                                "type": "string",
                                "maxLength": 255
                            }
                        }
                    },
                    "tags": {
                        "description": "Array of tag names added to the candidate application",
                        "type": "array",
                        "items": {
                            "description": "Tag name (eg. Proativo, Comunicativo)",
                            "type": "string",
                            "maxLength": 120
                        }
                    },
                    "manualCandidate": {
                        "$ref": "#/components/schemas/manualCandidate"
                    },
                    "candidate": {
                        "$ref": "#/components/schemas/candidate"
                    },
                    "additionalQuestions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/additionalQuestion"
                        }
                    }
                }
            },
            "applicationPostRequest": {
                "type": "object",
                "description": "Application to create",
                "properties": {
                    "notes": {
                        "description": "Notes about the application",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "candidateId": {
                        "description": "The id of the candidate to be added. This field cannot be used at same time of manualCandidate.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "manualCandidate": {
                        "description": "Candidate information. Use when the candidate is not applied yet for any other job. This field cannot be used at same time of candidateId.",
                        "type": "object",
                        "required": [
                            "name",
                            "lastName",
                            "email",
                            "insertionSource"
                        ],
                        "properties": {
                            "name": {
                                "description": "First name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "lastName": {
                                "description": "Last name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "email": {
                                "description": "E-mail of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "mobileNumber": {
                                "description": "Mobile phone number of the candidate (eg. +5511912345678)",
                                "type": "string",
                                "maxLength": 255
                            },
                            "linkedinProfileUrl": {
                                "description": "LinkedIn profile URL",
                                "type": "string",
                                "maxLength": 255
                            },
                            "insertionSource": {
                                "description": "Source of the application insertion",
                                "type": "string",
                                "maxLength": 255,
                                "enum": [
                                    "candidate_active_contact",
                                    "events",
                                    "hunting",
                                    "market_referral_consulting",
                                    "employee_referral"
                                ]
                            }
                        }
                    }
                }
            },
            "applicationResponse": {
                "description": "Application created",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Application identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "tags": {
                        "description": "Application tags",
                        "type": "array",
                        "items": {
                            "description": "Array of tag names added to the candidate application",
                            "type": "string",
                            "maxLength": 120
                        }
                    },
                    "score": {
                        "description": "Score value of the application (null if not calculated yet)",
                        "type": "number",
                        "nullable": true,
                        "format": "double"
                    },
                    "status": {
                        "description": "Current application status",
                        "type": "string",
                        "enum": [
                            "in_process",
                            "give_up",
                            "reproved",
                            "hired"
                        ],
                        "maxLength": 255
                    },
                    "currentStep": {
                        "description": "Current step of the application",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Step identifier",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "Step name",
                                "type": "string",
                                "maxLength": 255
                            },
                            "status": {
                                "description": "Status of the application step",
                                "type": "string",
                                "maxLength": 255,
                                "enum": [
                                    "approved",
                                    "done",
                                    "not_started",
                                    "started"
                                ]
                            }
                        }
                    },
                    "candidate": {
                        "description": "Candidate information",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Candidate identifier",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "First name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "lastName": {
                                "description": "Last name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "email": {
                                "description": "E-mail of the candidate",
                                "type": "string",
                                "maxLength": 255,
                                "format": "email"
                            },
                            "mobileNumber": {
                                "description": "Mobile phone number of the candidate (eg. +5511912345678)",
                                "type": "string",
                                "maxLength": 255
                            },
                            "linkedinProfileUrl": {
                                "description": "LinkedIn profile URL",
                                "type": "string",
                                "maxLength": 255
                            }
                        }
                    },
                    "manualCandidate": {
                        "description": "Manual insertion candidate information",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Candidate identifier",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "First name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "lastName": {
                                "description": "Last name of the candidate",
                                "type": "string",
                                "maxLength": 255
                            },
                            "email": {
                                "description": "E-mail of the candidate",
                                "type": "string",
                                "format": "email",
                                "maxLength": 255
                            },
                            "mobileNumber": {
                                "description": "Mobile phone number of the candidate (eg. +5511912345678)",
                                "type": "string",
                                "maxLength": 255
                            },
                            "linkedinProfileUrl": {
                                "description": "LinkedIn profile URL",
                                "type": "string",
                                "maxLength": 255
                            },
                            "insertionSource": {
                                "description": "Source of the application insertion",
                                "type": "string",
                                "maxLength": 255,
                                "enum": [
                                    "candidate_active_contact",
                                    "events",
                                    "hunting",
                                    "market_referral_consulting",
                                    "employee_referral",
                                    "chrome_extension"
                                ]
                            }
                        }
                    }
                }
            },
            "paginatedApplication": {
                "description": "An array of applications",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/application"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "manualCandidate": {
                "description": "Manual insertion candidate information",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Candidate identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "First name of the candidate",
                        "type": "string",
                        "maxLength": 255
                    },
                    "lastName": {
                        "description": "Last name of the candidate",
                        "type": "string",
                        "maxLength": 255
                    },
                    "email": {
                        "description": "E-mail of the candidate",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "mobileNumber": {
                        "description": "Mobile phone number of the candidate (eg. +5511912345678)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "linkedinProfileUrl": {
                        "description": "LinkedIn profile URL",
                        "type": "string",
                        "maxLength": 255
                    },
                    "insertionSource": {
                        "description": "Source of the application insertion",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "candidate_active_contact",
                            "events",
                            "hunting",
                            "market_referral_consulting",
                            "employee_referral"
                        ]
                    }
                }
            },
            "candidate": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Candidate identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Candidate name (eg. Maria)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "lastName": {
                        "description": "Candidate last name (eg. Santos)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "email": {
                        "description": "Candidate email (eg. maria.santos@provider.com)",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "identificationDocument": {
                        "description": "Candidate identification document (CPF or other) (eg. 99999999999)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "disabilities": {
                        "description": "The candidate has any disability",
                        "type": "boolean"
                    },
                    "disabilityTypes": {
                        "description": "A list of candidate disabilities",
                        "type": "array",
                        "items": {
                            "description": "Disability type",
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "physical_disability",
                                "visual_disability",
                                "hearing_disability",
                                "mental_disability",
                                "intellectual_disability"
                            ]
                        }
                    },
                    "birthdate": {
                        "description": "Date of birth",
                        "type": "string",
                        "format": "date"
                    },
                    "gender": {
                        "description": "Candidate gender",
                        "type": "string",
                        "maxLength": 11,
                        "enum": [
                            "male",
                            "female",
                            "other",
                            "notInformed"
                        ]
                    },
                    "addressZipCode": {
                        "description": "Candidate address zip code",
                        "type": "string",
                        "maxLength": 200
                    },
                    "addressNumber": {
                        "description": "Candidate address number",
                        "type": "string",
                        "maxLength": 500
                    },
                    "addressStreet": {
                        "description": "Candidate address street",
                        "type": "string",
                        "maxLength": 500
                    },
                    "addressCity": {
                        "description": "Candidate address city",
                        "type": "string",
                        "maxLength": 500
                    },
                    "addressState": {
                        "description": "Candidate address state",
                        "type": "string",
                        "maxLength": 500
                    },
                    "addressStateShortName": {
                        "description": "Candidate address short state name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "addressCountry": {
                        "description": "Candidate address country",
                        "type": "string",
                        "maxLength": 500
                    },
                    "addressCountryShortName": {
                        "description": "Candidate address short country name",
                        "type": "string",
                        "maxLength": 100
                    },
                    "mobileNumber": {
                        "description": "Candidate's cell phone",
                        "type": "string",
                        "maxLength": 255
                    },
                    "phoneNumber": {
                        "description": "Candidate's landline",
                        "type": "string",
                        "maxLength": 255
                    },
                    "areasOfInterest": {
                        "description": "A list of areas of interest",
                        "type": "array",
                        "items": {
                            "description": "Area of interest (eg. Finances, technology)",
                            "type": "string",
                            "maxLength": 255,
                            "enum": [
                                "marketing",
                                "finances",
                                "human_resources",
                                "commercial",
                                "logistics",
                                "engineering",
                                "judicial",
                                "technology",
                                "production",
                                "general",
                                "accounting",
                                "product",
                                "design_ux",
                                "content",
                                "administrative",
                                "customer_success",
                                "others",
                                "education"
                            ]
                        }
                    },
                    "schooling": {
                        "description": "Candidate's schooling level",
                        "type": "string",
                        "maxLength": 17,
                        "enum": [
                            "elementary_school",
                            "high_school"
                        ]
                    },
                    "schoolingStatus": {
                        "description": "Candidate's schooling status",
                        "type": "string",
                        "maxLength": 11,
                        "enum": [
                            "complete",
                            "in_progress",
                            "incomplete"
                        ]
                    },
                    "academicQualification": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/academicQualification"
                        }
                    },
                    "workExperience": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/workExperience"
                        }
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/candidateLanguage"
                        }
                    }
                }
            },
            "paginatedApplicationTags": {
                "description": "An array of application tags",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/tag"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Tag identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Tag name",
                        "type": "string",
                        "maxLength": 120
                    },
                    "jobId": {
                        "description": "Job identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "applicationId": {
                        "description": "Application identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdAt": {
                        "description": "Job creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Job update date",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "academicQualification": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Academic qualification identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "formation": {
                        "description": "Formation type",
                        "type": "string",
                        "maxLength": 13,
                        "enum": [
                            "graduation",
                            "technological",
                            "post_graduate",
                            "master_degree",
                            "phd"
                        ]
                    },
                    "institution": {
                        "description": "Institution or school name",
                        "type": "string",
                        "maxLength": 500
                    },
                    "course": {
                        "description": "Course name",
                        "type": "string",
                        "maxLength": 500
                    },
                    "status": {
                        "description": "Current status of the academic qualification",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "complete",
                            "in_progress",
                            "incomplete"
                        ]
                    },
                    "startMonth": {
                        "description": "Start month",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 12
                    },
                    "startYear": {
                        "description": "Start year",
                        "type": "integer",
                        "format": "int32"
                    },
                    "endMonth": {
                        "description": "End month",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 12
                    },
                    "endYear": {
                        "description": "End year",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "formation",
                    "institution",
                    "course",
                    "status",
                    "startMonth",
                    "startYear"
                ]
            },
            "workExperience": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Work experience identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "role": {
                        "description": "Professional role",
                        "type": "string",
                        "maxLength": 500
                    },
                    "companyName": {
                        "description": "Company name",
                        "type": "string",
                        "maxLength": 500
                    },
                    "activitiesPerformed": {
                        "description": "Activities performed in this job",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "startMonth": {
                        "description": "Start month",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 12
                    },
                    "startYear": {
                        "description": "Start year",
                        "type": "integer",
                        "format": "int32"
                    },
                    "endMonth": {
                        "description": "End month, null if current job",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 12
                    },
                    "endYear": {
                        "description": "End year, null if current job",
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "role",
                    "companyName",
                    "startMonth",
                    "startYear"
                ]
            },
            "candidateLanguage": {
                "type": "object",
                "properties": {
                    "language": {
                        "description": "Language name",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "german",
                            "arabic",
                            "bengali",
                            "kazakh",
                            "chinese",
                            "korean",
                            "haitian_creole",
                            "kurdish",
                            "spanish",
                            "french",
                            "greek",
                            "hindi",
                            "hungarian",
                            "english",
                            "italian",
                            "japanese",
                            "javanese",
                            "lahnda",
                            "malay",
                            "dutch",
                            "nepali",
                            "persian",
                            "polish",
                            "portuguese",
                            "romanian",
                            "russian",
                            "serbo_croatian",
                            "somali",
                            "swedish",
                            "thai",
                            "czech",
                            "turkish",
                            "ukrainian",
                            "uzbekistan",
                            "vietnamese"
                        ]
                    },
                    "level": {
                        "description": "Proficiency level",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "basic",
                            "intermediate",
                            "advanced",
                            "fluent"
                        ]
                    }
                },
                "required": [
                    "language",
                    "level"
                ]
            },
            "messageEmailSend": {
                "type": "object",
                "properties": {
                    "from": {
                        "description": "E-mail of the company user. Defaults to company's e-mail address",
                        "type": "string",
                        "maxLength": 255
                    },
                    "templateId": {
                        "description": "Template identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "allowReply": {
                        "description": "The candidate is allowed to reply the message",
                        "type": "boolean"
                    }
                },
                "required": [
                    "templateId",
                    "allowReply"
                ]
            },
            "applicationComment": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Timeline comment id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "description": "User id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "text": {
                        "description": "Comment text",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "hidden": {
                        "description": "Comment is hidden (visible only to API or user who created)",
                        "type": "boolean"
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "additionalQuestion": {
                "type": "object",
                "properties": {
                    "question": {
                        "description": "Question answered by candidate",
                        "type": "string",
                        "maxLength": 255
                    },
                    "answer": {
                        "description": "Answer(s) given by candidate for question",
                        "type": "array",
                        "items": {
                            "description": "Array of answers given",
                            "type": "string",
                            "maxLength": 255
                        }
                    }
                },
                "required": [
                    "question",
                    "answers"
                ]
            },
            "applicationRatingCriteria": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Application rating criteria identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "ratingCriteriaId": {
                        "description": "Job criteria identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "applicationId": {
                        "description": "Application identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "candidateId": {
                        "description": "Candidate identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "jobId": {
                        "description": "Job identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "description": "User identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "rating": {
                        "description": "Application criteria rating by the user",
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdAt": {
                        "description": "Application criteria rating creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Application criteria rating update date",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "criteriaRatings": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Job criteria identifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Job criteria description",
                        "type": "string",
                        "maxLength": 255
                    },
                    "ratings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/applicationRatingCriteria"
                        }
                    }
                }
            },
            "criteriaRatingsArray": {
                "description": "An array of the application's rating criteria, grouped by job criteria.",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/criteriaRatings"
                        }
                    }
                },
                "required": [
                    "results"
                ]
            },
            "hiringInformation": {
                "type": "object",
                "properties": {
                    "hiringType": {
                        "description": "Type of candidate hiring",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "enum": [
                            "employee_admission",
                            "employee_readmission",
                            "employee_reintegration",
                            "unrelated_worker_hiring",
                            "internal_transfer"
                        ]
                    },
                    "hiringDate": {
                        "description": "Date of hiring",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2020-12-31T23:59:59.999Z"
                    },
                    "jobVacancyCodeId": {
                        "description": "Job vacancy code id that is been fulfilled by this hiring",
                        "type": "integer",
                        "format": "int64",
                        "nullable": true
                    },
                    "salary": {
                        "description": "Hiring salary",
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "salaryCurrencyType": {
                        "description": "Hiring salary currency",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 2,
                        "enum": [
                            "R$",
                            "$",
                            "€",
                            "£"
                        ]
                    }
                }
            },
            "careerPage": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Career page ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "subdomain": {
                        "description": "Career page subdomain",
                        "type": "string",
                        "maxLength": 32
                    },
                    "name": {
                        "description": "Career page name",
                        "type": "string",
                        "maxLength": 128
                    },
                    "jobBoardsName": {
                        "description": "Name to be used on job boards published jobs",
                        "type": "string",
                        "maxLength": 128
                    },
                    "companySection": {
                        "description": "Information about the company section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "description": {
                                "description": "Section description shown in the page",
                                "type": "string",
                                "maxLength": 1073741824
                            }
                        }
                    },
                    "jobsSection": {
                        "description": "Information about the jobs section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "description": {
                                "description": "Section description shown in the page",
                                "type": "string",
                                "maxLength": 1073741824
                            }
                        }
                    },
                    "socialMediaSection": {
                        "description": "Information about the contacts section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "websiteUrl": {
                                "description": "URL of the company's website",
                                "type": "string",
                                "maxLength": 255
                            },
                            "facebookUrl": {
                                "description": "URL of the company's Facebook page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "instagramUrl": {
                                "description": "URL of the company's Instagram profile",
                                "type": "string",
                                "maxLength": 255
                            },
                            "linkedinUrl": {
                                "description": "URL of the company's LinkedIn page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "lovemondaysUrl": {
                                "description": "URL of the company's LoveMonday profile",
                                "type": "string",
                                "maxLength": 255
                            }
                        }
                    },
                    "videosSection": {
                        "description": "Information about the videos section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "description": {
                                "description": "Section description shown in the page",
                                "type": "string",
                                "maxLength": 1073741824
                            },
                            "videos": {
                                "description": "Array of video URLs",
                                "type": "array",
                                "items": {
                                    "description": "Video URL",
                                    "type": "string",
                                    "maxLength": 255
                                }
                            }
                        }
                    },
                    "candidateTestimonialsSection": {
                        "description": "Information about the candidates testimonials section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "description": {
                                "description": "Section description shown in the page",
                                "type": "string",
                                "maxLength": 1073741824
                            }
                        }
                    },
                    "employeeTestimonialsSection": {
                        "description": "Information about the employees testimonials section of the career page",
                        "type": "object",
                        "properties": {
                            "title": {
                                "description": "Section title shown in the page",
                                "type": "string",
                                "maxLength": 255
                            },
                            "description": {
                                "description": "Section description shown in the page",
                                "type": "string",
                                "maxLength": 1073741824
                            }
                        }
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "paginatedCareerPage": {
                "description": "An array of career pages",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/careerPage"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "departmentRequest": {
                "type": "object",
                "description": "Department to create",
                "properties": {
                    "name": {
                        "description": "Name of the department",
                        "type": "string",
                        "maxLength": 255
                    },
                    "code": {
                        "description": "External code of the department",
                        "type": "string",
                        "maxLength": 255
                    },
                    "similarTo": {
                        "description": "Department is similar to",
                        "type": "string",
                        "maxLength": 64,
                        "enum": [
                            "financial_management",
                            "agronomy",
                            "architecture",
                            "audit_or_quality",
                            "attendance",
                            "sales",
                            "purchases",
                            "communication_or_design_or_marketing",
                            "accounting_or_controlling",
                            "engineering_or_maintenance_or_technical_services",
                            "legal",
                            "innovation_or_product",
                            "logistics",
                            "operations",
                            "project_or_processes",
                            "human_resources",
                            "security",
                            "technology"
                        ]
                    }
                },
                "required": [
                    "name",
                    "similarTo"
                ]
            },
            "department": {
                "description": "Company department",
                "properties": {
                    "id": {
                        "description": "Department ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Name of the department",
                        "type": "string",
                        "maxLength": 255
                    },
                    "code": {
                        "description": "External code of the department",
                        "type": "string",
                        "maxLength": 255
                    },
                    "similarTo": {
                        "description": "Department is similar to",
                        "type": "string",
                        "maxLength": 64,
                        "enum": [
                            "financial_management",
                            "agronomy",
                            "architecture",
                            "audit_or_quality",
                            "attendance",
                            "sales",
                            "purchases",
                            "communication_or_design_or_marketing",
                            "accounting_or_controlling",
                            "engineering_or_maintenance_or_technical_services",
                            "legal",
                            "innovation_or_product",
                            "logistics",
                            "operations",
                            "project_or_processes",
                            "human_resources",
                            "security",
                            "technology"
                        ]
                    },
                    "createdAt": {
                        "description": "Department creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Department update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedDepartment": {
                "description": "An array of departments",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/department"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "customFields": {
                "description": "An array of custom fields",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/customField"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "customField": {
                "description": "Custom field data",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Custom field id",
                        "type": "string",
                        "maxLength": 32
                    },
                    "label": {
                        "description": "Custom field label",
                        "type": "string",
                        "maxLength": 32
                    },
                    "type": {
                        "description": "Custom field type",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "select",
                            "multiSelect",
                            "text",
                            "boolean",
                            "number",
                            "date",
                            "time"
                        ]
                    },
                    "order": {
                        "description": "Custom field order of appearance when editing a job",
                        "type": "integer",
                        "format": "int64"
                    },
                    "required": {
                        "description": "Informs if this custom field response is mandatory",
                        "type": "boolean"
                    },
                    "enum": {
                        "description": "Possible options to be provided as value",
                        "type": "array",
                        "items": {
                            "description": "Value",
                            "type": "string"
                        }
                    }
                }
            },
            "jobTemplateCustomFields": {
                "description": "An array of job template custom field",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobCustomField"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "jobTemplate": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Template ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 100
                    },
                    "name": {
                        "description": "Job name (eg. Programador Node.js)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "Job type (eg. vacancy_type_effective, vacancy_type_internship)",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "vacancy_type_apprentice",
                            "vacancy_type_associate",
                            "vacancy_type_talent_pool",
                            "vacancy_type_effective",
                            "vacancy_type_internship",
                            "vacancy_type_summer",
                            "vacancy_type_temporary",
                            "vacancy_type_outsource",
                            "vacancy_type_trainee",
                            "vacancy_type_volunteer",
                            "vacancy_legal_entity",
                            "vacancy_type_lecturer",
                            "vacancy_type_freelancer",
                            "vacancy_type_autonomous"
                        ]
                    },
                    "departmentId": {
                        "description": "Department ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentName": {
                        "description": "Department name (eg. Recursos Humanos, Logística)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "roleId": {
                        "description": "Role ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleName": {
                        "description": "Role name (eg. Desenvolvedor, Estagiário)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "branchId": {
                        "description": "Branch ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "branchName": {
                        "description": "Branch name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "description": "Job description",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "responsibilities": {
                        "description": "Main responsabilities and attribuitions",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "prerequisites": {
                        "description": "Requirements and skills",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "additionalInformation": {
                        "description": "Additional relevant informations",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "notes": {
                        "description": "Internal notes about the job",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "disabilities": {
                        "description": "Available for person with disabilities",
                        "type": "boolean"
                    },
                    "addressStreet": {
                        "description": "Job address street",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Job address number",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCity": {
                        "description": "Job address city",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressState": {
                        "description": "Job address state",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressStateShortName": {
                        "description": "Job address short state name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountry": {
                        "description": "Job address country",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountryShortName": {
                        "description": "Job address short country name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressZipCode": {
                        "description": "Job address zip code",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressLatitude": {
                        "description": "Work location latitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "addressLongitude": {
                        "description": "Work location longitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "remoteWorking": {
                        "description": "This job is for remote working.",
                        "type": "boolean"
                    },
                    "reason": {
                        "description": "Job opening reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase",
                            "staff_replacement"
                        ]
                    },
                    "image": {
                        "description": "Image url for job website",
                        "type": "string",
                        "maxLength": 255
                    },
                    "socialMediaImage": {
                        "description": "Image url for social media",
                        "type": "string",
                        "maxLength": 255
                    },
                    "careerPageId": {
                        "description": "Career page ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "careerPageName": {
                        "description": "Career page name",
                        "type": "string",
                        "maxLength": 128
                    },
                    "customFields": {
                        "description": "Custom fields defined for this job template",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobTemplateCustomField"
                        }
                    }
                }
            },
            "paginatedJobTemplates": {
                "description": "An array of job templates",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobTemplate"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "jobTemplateCustomField": {
                "description": "Custom field data",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Custom field id",
                        "type": "string",
                        "maxLength": 32
                    },
                    "label": {
                        "description": "Custom field label",
                        "type": "string",
                        "maxLength": 32
                    },
                    "value": {
                        "description": "Custom field provided value",
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 255
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            }
                        ]
                    },
                    "type": {
                        "description": "Custom field type",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "select",
                            "multiSelect",
                            "text",
                            "boolean",
                            "number",
                            "date",
                            "time"
                        ]
                    },
                    "order": {
                        "description": "Custom field order of appearance when editing a job template",
                        "type": "integer",
                        "format": "int64"
                    },
                    "required": {
                        "description": "Informs if this custom field response is mandatory",
                        "type": "boolean"
                    },
                    "enum": {
                        "description": "Possible options to be provided as value",
                        "type": "array",
                        "items": {
                            "description": "Value",
                            "type": "string"
                        }
                    }
                }
            },
            "jobCustomFields": {
                "description": "An array of job custom field",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobCustomField"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "job": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Job ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "description": "Job posting code (eg. 999-99999)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "name": {
                        "description": "Job name (eg. Programador Node.js)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Job status",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "draft",
                            "waiting_approval",
                            "approved",
                            "disapproved",
                            "published",
                            "frozen",
                            "closed",
                            "canceled"
                        ]
                    },
                    "type": {
                        "description": "Job type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "vacancy_type_apprentice",
                            "vacancy_type_associate",
                            "vacancy_type_talent_pool",
                            "vacancy_type_effective",
                            "vacancy_type_internship",
                            "vacancy_type_summer",
                            "vacancy_type_temporary",
                            "vacancy_type_outsource",
                            "vacancy_type_trainee",
                            "vacancy_type_volunteer",
                            "vacancy_legal_entity",
                            "vacancy_type_lecturer",
                            "vacancy_type_freelancer",
                            "vacancy_type_autonomous"
                        ]
                    },
                    "publicationType": {
                        "description": "Publication type (eg. external, internal)",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "external",
                            "internal"
                        ]
                    },
                    "numVacancies": {
                        "description": "Number of total vacancies (eg. 10)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentId": {
                        "description": "Department ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentName": {
                        "description": "Department name (eg. Recursos Humanos, Logística)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "roleId": {
                        "description": "Role ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleName": {
                        "description": "Role name (eg. Desenvolvedor, Estagiário)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "branchId": {
                        "description": "Branch ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "branchName": {
                        "description": "Branch name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "description": "Job description",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "responsibilities": {
                        "description": "Main responsabilities and attribuitions",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "prerequisites": {
                        "description": "Requirements and skills",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "additionalInformation": {
                        "description": "Additional relevant informations",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "notes": {
                        "description": "Internal notes about the job",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "disabilities": {
                        "description": "Available for person with disabilities",
                        "type": "boolean"
                    },
                    "addressCountry": {
                        "description": "Job address country",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountryShortName": {
                        "description": "Job address short country name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressState": {
                        "description": "Job address state",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressStateShortName": {
                        "description": "Job address short state name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCity": {
                        "description": "Job address city",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressStreet": {
                        "description": "Job address street",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Job address number",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressZipCode": {
                        "description": "Job address zip code",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressLatitude": {
                        "description": "Work location latitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "addressLongitude": {
                        "description": "Work location longitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "remoteWorking": {
                        "description": "This job is for remote working.",
                        "type": "boolean"
                    },
                    "reason": {
                        "description": "Job opening reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase",
                            "staff_replacement"
                        ]
                    },
                    "image": {
                        "description": "Image url for job website",
                        "type": "string",
                        "maxLength": 255
                    },
                    "socialMediaImage": {
                        "description": "Image url for social media",
                        "type": "string",
                        "maxLength": 255
                    },
                    "applicationDeadline": {
                        "description": "Final date for application",
                        "type": "string",
                        "format": "date"
                    },
                    "careerPageId": {
                        "description": "Career page ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "careerPageName": {
                        "description": "Career page name",
                        "type": "string",
                        "maxLength": 128
                    },
                    "vacancyCodes": {
                        "description": "Vacancy codes associated to job",
                        "type": "array",
                        "items": {
                            "description": "Vacancy code data",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Vacancy Code id",
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "code": {
                                    "description": "Vacancy Code",
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "status": {
                                    "description": "Vacancy status",
                                    "type": "string",
                                    "maxLength": 32,
                                    "enum": [
                                        "valid",
                                        "invalid",
                                        "error",
                                        "waiting"
                                    ]
                                },
                                "errorMessage": {
                                    "description": "Error message when status=error (eg. Gestor inválido)",
                                    "type": "string",
                                    "maxLength": 255
                                }
                            }
                        }
                    },
                    "managerId": {
                        "description": "User ID of the job manager",
                        "type": "integer",
                        "format": "int64"
                    },
                    "managerName": {
                        "description": "Name of the job manager",
                        "type": "string",
                        "maxLength": 255
                    },
                    "managerEmail": {
                        "description": "E-mail of the job manager",
                        "type": "string",
                        "maxLength": 255,
                        "format": "email"
                    },
                    "recruiterId": {
                        "description": "User ID of the job recruiter",
                        "type": "integer",
                        "format": "int64"
                    },
                    "recruiterName": {
                        "description": "Name of the job recruiter",
                        "type": "string",
                        "maxLength": 255
                    },
                    "recruiterEmail": {
                        "description": "E-mail of the job recruiter",
                        "type": "string",
                        "maxLength": 255,
                        "format": "email"
                    },
                    "hiringDeadline": {
                        "description": "Deadline for hiring candidates",
                        "type": "string",
                        "format": "date"
                    },
                    "salary": {
                        "description": "Salary data",
                        "type": "object",
                        "properties": {
                            "currency": {
                                "type": "string",
                                "maxLength": 3,
                                "description": "Salary currency type (eg. R$)"
                            },
                            "startsAt": {
                                "type": "number",
                                "format": "double",
                                "description": "Salary min value"
                            },
                            "endsAt": {
                                "type": "number",
                                "format": "double",
                                "description": "Salary max value"
                            }
                        }
                    },
                    "customFields": {
                        "description": "Custom fields defined for this job",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobCustomField"
                        }
                    },
                    "jobRatingCriterias": {
                        "description": "Rating criterias that belongs to the job",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobRatingCriteria"
                        }
                    },
                    "cancelReason": {
                        "description": "Job cancel reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase_or_substitution_postponed",
                            "cancellation_requested_by_manager",
                            "internal_transfer",
                            "organizational_restructuring",
                            "budget_review",
                            "other"
                        ]
                    },
                    "cancelReasonNotes": {
                        "description": "Job cancel reason notes provided by user when cancelReason is other",
                        "type": "string",
                        "maxLength": 255
                    },
                    "canceledByEmail": {
                        "description": "E-mail of the person who canceled the job",
                        "type": "string",
                        "maxLength": 255,
                        "format": "email"
                    },
                    "cancelAt": {
                        "description": "Date of job cancel",
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "description": "Date of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "publishedAt": {
                        "description": "Date of job publication",
                        "type": "string",
                        "format": "date-time"
                    },
                    "approvedAt": {
                        "description": "Date of job approve",
                        "type": "string",
                        "format": "date-time"
                    },
                    "disapprovedAt": {
                        "description": "Date of job disapprove",
                        "type": "string",
                        "format": "date-time"
                    },
                    "closedAt": {
                        "description": "Date of job close",
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastFreezeDate": {
                        "description": "Last date of job freeze",
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastUnFreezeDate": {
                        "description": "Last date of job unfreeze",
                        "type": "string",
                        "format": "date-time"
                    },
                    "creatorId": {
                        "description": "User ID of the job creator",
                        "type": "integer",
                        "format": "int64"
                    },
                    "creatorName": {
                        "description": "Name of the job creator",
                        "type": "string",
                        "maxLength": 255
                    },
                    "creatorEmail": {
                        "description": "E-mail of the job creator",
                        "type": "string",
                        "maxLength": 255,
                        "format": "email"
                    },
                    "videoUrl": {
                        "description": "A video url about the job.",
                        "type": "string",
                        "maxLength": 255
                    },
                    "approvers": {
                        "description": "User ids to be approvers of the job",
                        "type": "array",
                        "items": {
                            "description": "User ids",
                            "type": "number"
                        }
                    },
                    "workflowRequestMethod": {
                        "description": "Workflow request method",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "all_at_once",
                            "in_order"
                        ]
                    }
                }
            },
            "jobRatingCriteria": {
                "description": "Rating criterias for the job",
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    }
                }
            },
            "paginatedJob": {
                "description": "An array of jobs",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/job"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "jobPostResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Job ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "description": "Job posting code (eg. 999-99999)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "name": {
                        "description": "Job name (eg. Programador Node.js)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Job status",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "draft",
                            "waiting_approval",
                            "approved",
                            "disapproved",
                            "published",
                            "frozen",
                            "closed"
                        ]
                    },
                    "type": {
                        "description": "Job type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "vacancy_type_apprentice",
                            "vacancy_type_associate",
                            "vacancy_type_talent_pool",
                            "vacancy_type_effective",
                            "vacancy_type_internship",
                            "vacancy_type_summer",
                            "vacancy_type_temporary",
                            "vacancy_type_outsource",
                            "vacancy_type_trainee",
                            "vacancy_type_volunteer",
                            "vacancy_legal_entity",
                            "vacancy_type_lecturer",
                            "vacancy_type_freelancer",
                            "vacancy_type_autonomous"
                        ]
                    },
                    "publicationType": {
                        "description": "Publication type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "external",
                            "internal"
                        ]
                    },
                    "numVacancies": {
                        "description": "Number of total vacancies (eg. 10)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentId": {
                        "description": "Department ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleId": {
                        "description": "Role ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "createdAt": {
                        "description": "Job creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Job update date",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "jobStep": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Step ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Step name (eg. Register)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "description": "Step description",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "type": {
                        "description": "Step type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "registration",
                            "online",
                            "offline",
                            "hiring"
                        ]
                    },
                    "order": {
                        "description": "Step order index",
                        "type": "integer",
                        "format": "int32"
                    },
                    "endDate": {
                        "description": "Final date to accept applications",
                        "type": "string",
                        "format": "date"
                    },
                    "onlineType": {
                        "description": "Online step type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "customAssessment",
                            "providerAssessment",
                            "video"
                        ]
                    },
                    "createdAt": {
                        "description": "Step creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Step update date",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "paginatedJobStep": {
                "description": "An array of job steps",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobStep"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "jobPutRequest": {
                "type": "object",
                "description": "Job to create",
                "properties": {
                    "code": {
                        "description": "Company's job internal code. If not provided, the API will generate one.",
                        "type": "string",
                        "maxLength": 255
                    },
                    "name": {
                        "description": "Job name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Job status. Refer to https://developers.gupy.io/docs/mudanças-de-estado-de-uma-vaga (portuguese only) for more information on updating the status of a job.",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "draft",
                            "waiting_approval",
                            "approved",
                            "disapproved",
                            "published",
                            "frozen",
                            "closed",
                            "canceled"
                        ]
                    },
                    "type": {
                        "description": "Job type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "vacancy_type_apprentice",
                            "vacancy_type_associate",
                            "vacancy_type_talent_pool",
                            "vacancy_type_effective",
                            "vacancy_type_internship",
                            "vacancy_type_summer",
                            "vacancy_type_temporary",
                            "vacancy_type_outsource",
                            "vacancy_type_trainee",
                            "vacancy_type_volunteer",
                            "vacancy_legal_entity",
                            "vacancy_type_lecturer",
                            "vacancy_type_freelancer",
                            "vacancy_type_autonomous"
                        ]
                    },
                    "publicationType": {
                        "description": "Job publication type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "external",
                            "internal"
                        ]
                    },
                    "numVacancies": {
                        "description": "The number of open vacancies for this job",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentId": {
                        "description": "Job department or area id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleId": {
                        "description": "Job role id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "description": "Job description, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "responsibilities": {
                        "description": "Responsibilities of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "prerequisites": {
                        "description": "Pre-requisites of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "additionalInformation": {
                        "description": "Additional information of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "notes": {
                        "description": "Notes about the job (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "disabilities": {
                        "description": "This job is available to person with disabilities",
                        "type": "boolean"
                    },
                    "addressStreet": {
                        "description": "Address street name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Address number and complements",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCity": {
                        "description": "Address city",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressState": {
                        "description": "Address state name (eg. São Paulo)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressStateShortName": {
                        "description": "Address state short name (eg. SP)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountry": {
                        "description": "Address country name (eg. Brasil)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountryShortName": {
                        "description": "Address country short name (eg. BRA)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressZipCode": {
                        "description": "Address Zip Code",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressLatitude": {
                        "description": "Work location latitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "addressLongitude": {
                        "description": "Work location longitude.",
                        "type": "number",
                        "format": "double"
                    },
                    "branchId": {
                        "description": "Job branch id",
                        "type": "number",
                        "format": "int64"
                    },
                    "remoteWorking": {
                        "description": "This job is for remote working.",
                        "type": "boolean"
                    },
                    "salary": {
                        "description": "Job salary information (not shown in the career page).",
                        "type": "object",
                        "required": [
                            "currency",
                            "startsAt"
                        ],
                        "properties": {
                            "currency": {
                                "description": "Job currency code (eg R$, USD)",
                                "type": "string",
                                "maxLength": 3
                            },
                            "startsAt": {
                                "description": "Starting value",
                                "type": "number",
                                "format": "double"
                            },
                            "endsAt": {
                                "description": "Ending value",
                                "type": "number",
                                "format": "double"
                            }
                        }
                    },
                    "reason": {
                        "description": "Job opening reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase",
                            "staff_replacement"
                        ]
                    },
                    "recruiterEmail": {
                        "description": "Job recruiter e-mail. If provided, must be an valid user in Gupy.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "managerEmail": {
                        "description": "Job manager e-mail. If provided, must be an valid user in Gupy.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "careerPageId": {
                        "description": "Id of the career page where the job will be shown.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "hiringDeadline": {
                        "description": "Deadline for hiring candidates",
                        "type": "string",
                        "format": "date"
                    },
                    "customFields": {
                        "description": "Custom fields values defined for this job.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobCustomFieldData"
                        }
                    },
                    "cancelReason": {
                        "description": "Job cancel reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase_or_substitution_postponed",
                            "cancellation_requested_by_manager",
                            "internal_transfer",
                            "organizational_restructuring",
                            "budget_review",
                            "other"
                        ]
                    },
                    "cancelReasonNotes": {
                        "description": "Job cancel reason notes provided by user when cancelReason is other",
                        "type": "string",
                        "maxLength": 255
                    },
                    "canceledByEmail": {
                        "description": "E-mail of the person who canceled the job",
                        "type": "string",
                        "maxLength": 255,
                        "format": "email"
                    },
                    "videoUrl": {
                        "description": "A video url about the job.",
                        "type": "string",
                        "maxLength": 255
                    },
                    "approvers": {
                        "description": "User ids to be approvers of the job",
                        "type": "array",
                        "items": {
                            "description": "User ids",
                            "type": "number"
                        }
                    },
                    "workflowRequestMethod": {
                        "description": "Workflow request method",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "all_at_once",
                            "in_order"
                        ]
                    }
                }
            },
            "jobPostRequest": {
                "type": "object",
                "description": "Job to create",
                "required": [
                    "name",
                    "type",
                    "publicationType",
                    "numVacancies",
                    "departmentId",
                    "roleId"
                ],
                "properties": {
                    "templateId": {
                        "description": "Job template to be used when creating the job. If provided, the template will be copied first.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "description": "Company's job internal code. If not provided, the API will generate one.",
                        "type": "string",
                        "maxLength": 255
                    },
                    "name": {
                        "description": "Job name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "Job type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "vacancy_type_apprentice",
                            "vacancy_type_associate",
                            "vacancy_type_talent_pool",
                            "vacancy_type_effective",
                            "vacancy_type_internship",
                            "vacancy_type_summer",
                            "vacancy_type_temporary",
                            "vacancy_type_outsource",
                            "vacancy_type_trainee",
                            "vacancy_type_volunteer",
                            "vacancy_legal_entity",
                            "vacancy_type_lecturer",
                            "vacancy_type_freelancer",
                            "vacancy_type_autonomous"
                        ]
                    },
                    "publicationType": {
                        "description": "Job publication type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "external",
                            "internal"
                        ]
                    },
                    "hiringDeadline": {
                        "description": "Deadline for hiring candidates",
                        "type": "string",
                        "format": "date"
                    },
                    "numVacancies": {
                        "description": "The number of open vacancies for this job",
                        "type": "integer",
                        "format": "int64"
                    },
                    "departmentId": {
                        "description": "Job department or area id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleId": {
                        "description": "Job role id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": {
                        "description": "Job description, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "responsibilities": {
                        "description": "Responsibilities of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "prerequisites": {
                        "description": "Pre-requisites of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "additionalInformation": {
                        "description": "Additional information of the job, shown in the career page (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "notes": {
                        "description": "Notes about the job (free text)",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "disabilities": {
                        "description": "This job is available to person with disabilities",
                        "type": "boolean"
                    },
                    "addressStreet": {
                        "description": "Address street name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Address number and complements",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCity": {
                        "description": "Address city",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressState": {
                        "description": "Address state name (eg. São Paulo)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressStateShortName": {
                        "description": "Address state short name (eg. SP)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountry": {
                        "description": "Address country name (eg. Brasil)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressCountryShortName": {
                        "description": "Address country short name (eg. BRA)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressZipCode": {
                        "description": "Address Zip Code",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressLatitude": {
                        "description": "Work location latitude. If not provided, the addressZipCode will be used to get the latitude (this functionality only works with Brazilian postal codes).",
                        "type": "number",
                        "format": "double"
                    },
                    "addressLongitude": {
                        "description": "Work location longitude. If not provided, the addressZipCode will be used to get the longitude (this functionality only works with Brazilian postal codes).",
                        "type": "number",
                        "format": "double"
                    },
                    "branchId": {
                        "description": "Job branch id",
                        "type": "number",
                        "format": "int64"
                    },
                    "remoteWorking": {
                        "description": "This job is for remote working.",
                        "type": "boolean"
                    },
                    "salary": {
                        "description": "Job salary information (not shown in the career page).",
                        "type": "object",
                        "required": [
                            "currency",
                            "startsAt"
                        ],
                        "properties": {
                            "currency": {
                                "description": "Job currency code (eg R$, USD)",
                                "type": "string",
                                "maxLength": 3
                            },
                            "startsAt": {
                                "description": "Starting value",
                                "type": "number",
                                "format": "double"
                            },
                            "endsAt": {
                                "description": "Ending value",
                                "type": "number",
                                "format": "double"
                            }
                        }
                    },
                    "reason": {
                        "description": "Job opening reason",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "staff_increase",
                            "staff_replacement"
                        ]
                    },
                    "recruiterEmail": {
                        "description": "Job recruiter e-mail. If provided, must be an valid user in Gupy.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "managerEmail": {
                        "description": "Job manager e-mail. If provided, must be an valid user in Gupy.",
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "careerPageId": {
                        "description": "Id of the career page where the job will be shown.",
                        "type": "integer",
                        "format": "int64"
                    },
                    "customFields": {
                        "description": "Custom fields values defined for this job.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/jobCustomFieldData"
                        }
                    },
                    "jobRatingCriterias": {
                        "description": "Rating criterias for the job",
                        "type": "array",
                        "items": {
                            "description": "persisted criterias",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "criteria id",
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "name": {
                                    "description": "criteria name",
                                    "type": "string",
                                    "maxLength": 255
                                }
                            }
                        }
                    },
                    "videoUrl": {
                        "description": "A video url about the job.",
                        "type": "string",
                        "maxLength": 255
                    }
                }
            },
            "jobCustomField": {
                "description": "Custom field data",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Custom field id",
                        "type": "string",
                        "maxLength": 32
                    },
                    "label": {
                        "description": "Custom field label",
                        "type": "string",
                        "maxLength": 32
                    },
                    "value": {
                        "description": "Custom field provided value",
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 255
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "maxLength": 255
                                }
                            }
                        ]
                    },
                    "type": {
                        "description": "Custom field type",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "select",
                            "multiSelect",
                            "text",
                            "boolean",
                            "number",
                            "date",
                            "time"
                        ]
                    },
                    "order": {
                        "description": "Custom field order of appearance when editing a job",
                        "type": "integer",
                        "format": "int64"
                    },
                    "required": {
                        "description": "Informs if this custom field response is mandatory",
                        "type": "boolean"
                    },
                    "enum": {
                        "description": "Possible options to be provided as value",
                        "type": "array",
                        "items": {
                            "description": "Value",
                            "type": "string"
                        }
                    }
                }
            },
            "jobCustomFieldData": {
                "description": "Custom field data for job creation or update",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Custom field id",
                        "type": "string",
                        "maxLength": 255
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string",
                                "maxLength": 255,
                                "description": "Custom field provided value"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                "description": "Custom field selected options which must be available in enum of `jobCustomFields`"
                            }
                        ]
                    }
                }
            },
            "roleRequest": {
                "type": "object",
                "description": "Role to be created or updated",
                "properties": {
                    "name": {
                        "description": "Role name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "code": {
                        "description": "External code of the role",
                        "type": "string",
                        "maxLength": 255
                    },
                    "similarTo": {
                        "description": "Role is similar to",
                        "type": "string",
                        "maxLength": 64,
                        "enum": [
                            "apprentice",
                            "analyst",
                            "auxiliary",
                            "coordinator",
                            "consultant",
                            "developer",
                            "director",
                            "intern",
                            "supervisor",
                            "specialist",
                            "manager",
                            "operator",
                            "technician",
                            "trainee"
                        ]
                    }
                },
                "required": [
                    "name",
                    "similarTo"
                ]
            },
            "role": {
                "description": "Company role",
                "properties": {
                    "id": {
                        "description": "Role ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Role name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "code": {
                        "description": "External code of the role",
                        "type": "string",
                        "maxLength": 255
                    },
                    "similarTo": {
                        "description": "Role is similar to",
                        "type": "string",
                        "maxLength": 64,
                        "enum": [
                            "analyst",
                            "apprentice",
                            "auxiliary",
                            "consultant",
                            "coordinator",
                            "developer",
                            "director",
                            "intern",
                            "specialist",
                            "supervisor",
                            "manager",
                            "operator",
                            "technician",
                            "trainee"
                        ]
                    },
                    "createdAt": {
                        "description": "Role creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Role update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedRole": {
                "description": "An array of roles",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/role"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "errorResponse": {
                "type": "object",
                "properties": {
                    "title": {
                        "description": "A short, human-readable summary of the problem type",
                        "type": "string",
                        "maxLength": 255
                    },
                    "detail": {
                        "description": "A human-readable explanation specific to this occurrence of the problem",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "The HTTP status code generated for this occurrence of the problem",
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "paginatedResult": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "userAccessProfile": {
                "type": "object",
                "description": "User Access Profile",
                "properties": {
                    "id": {
                        "description": "User profile ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "User profile name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "permissions": {
                        "description": "User Profile permissions",
                        "type": "array",
                        "items": {
                            "description": "Permission",
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "paginatedUserAccessProfile": {
                "description": "An array of user access profiles",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/userAccessProfile"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "companyUserPostRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "User name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "email": {
                        "description": "User email",
                        "type": "string",
                        "maxLength": 255
                    },
                    "profileTestEnabled": {
                        "description": "Flag to set if tests are enabled",
                        "type": "boolean"
                    },
                    "accessProfileId": {
                        "description": "Id from access profile to be bound",
                        "type": "number",
                        "format": "int64"
                    },
                    "departmentId": {
                        "description": "Id from department to be bound",
                        "type": "number",
                        "format": "int64"
                    },
                    "roleId": {
                        "description": "Id from user role",
                        "type": "number",
                        "format": "int64"
                    },
                    "code": {
                        "description": "User identifier code",
                        "type": "string",
                        "maxLength": 255
                    },
                    "taxpayerRegistry": {
                        "description": "User taxpayer registry",
                        "type": "string",
                        "maxLength": 255
                    },
                    "countryOfOrigin": {
                        "description": "User origin country",
                        "type": "string",
                        "maxLength": 255
                    },
                    "branchIds": {
                        "description": "Ids from branches to be bound",
                        "type": "array",
                        "items": {
                            "description": "Branches ids to be bound",
                            "type": "number",
                            "format": "int64"
                        }
                    }
                },
                "required": [
                    "name",
                    "email"
                ]
            },
            "user": {
                "type": "object",
                "description": "User",
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "User name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "email": {
                        "description": "User email",
                        "type": "string",
                        "maxLength": 255
                    },
                    "departmentId": {
                        "description": "Id from department from whose the user belongs",
                        "type": "integer",
                        "format": "int64"
                    },
                    "roleId": {
                        "description": "Id from role from whose the user belongs",
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileTestEnabled": {
                        "description": "Checks if user must make profile tests",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Kind of user",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "root",
                            "owner",
                            "guest"
                        ]
                    },
                    "code": {
                        "description": "User identifier",
                        "type": "string",
                        "maxLength": 255
                    },
                    "taxpayerRegistry": {
                        "description": "User taxpayer registry",
                        "type": "string",
                        "maxLength": 255
                    },
                    "countryOfOrigin": {
                        "description": "User origin country",
                        "type": "string",
                        "maxLength": 255
                    },
                    "accessProfileId": {
                        "description": "Id from access profile",
                        "type": "number",
                        "format": "int64"
                    },
                    "branchIds": {
                        "description": "List of company branches IDs associated to the user",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "code",
                    "path",
                    "name",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedUser": {
                "description": "An array of users",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "applicationCommentPost": {
                "type": "object",
                "properties": {
                    "text": {
                        "description": "Comment text",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "hidden": {
                        "description": "Comment is hidden (visible only to API)",
                        "type": "boolean"
                    }
                },
                "required": [
                    "text"
                ]
            },
            "paginatedApplicationComment": {
                "description": "An array of applications comments",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/applicationComment"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "branchPostRequest": {
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Branch code",
                        "type": "string",
                        "maxLength": 200
                    },
                    "name": {
                        "description": "Branch name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "path": {
                        "description": "The path in the organizational structure",
                        "type": "array",
                        "items": {
                            "description": "Path item (eg. Gupy, Brazil)",
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    "addressCountry": {
                        "description": "Branch country",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressCountryShortName": {
                        "description": "Branch country short name",
                        "type": "string",
                        "maxLength": 8
                    },
                    "addressState": {
                        "description": "Branch state",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressStateShortName": {
                        "description": "Branch state short name",
                        "type": "string",
                        "maxLength": 32
                    },
                    "addressCity": {
                        "description": "Branch city",
                        "type": "string",
                        "maxLength": 100
                    },
                    "addressStreet": {
                        "description": "Branch street",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Branch address number",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressZipCode": {
                        "description": "Branch city",
                        "type": "string",
                        "maxLength": 16
                    }
                },
                "required": [
                    "code",
                    "path",
                    "name"
                ]
            },
            "branch": {
                "type": "object",
                "description": "Branch",
                "properties": {
                    "id": {
                        "description": "Branch ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "description": "Branch code",
                        "type": "string",
                        "maxLength": 200
                    },
                    "name": {
                        "description": "Branch name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "path": {
                        "description": "The path in the organizational structure",
                        "type": "array",
                        "items": {
                            "description": "Path item (eg. Gupy, Brazil)",
                            "type": "string",
                            "maxLength": 255
                        }
                    },
                    "addressCountry": {
                        "description": "Branch country",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressCountryShortName": {
                        "description": "Branch country short name",
                        "type": "string",
                        "maxLength": 8
                    },
                    "addressState": {
                        "description": "Branch state",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressStateShortName": {
                        "description": "Branch state short name",
                        "type": "string",
                        "maxLength": 32
                    },
                    "addressCity": {
                        "description": "Branch city",
                        "type": "string",
                        "maxLength": 100
                    },
                    "addressStreet": {
                        "description": "Branch street",
                        "type": "string",
                        "maxLength": 255
                    },
                    "addressNumber": {
                        "description": "Branch address number",
                        "type": "string",
                        "maxLength": 64
                    },
                    "addressZipCode": {
                        "description": "Branch city",
                        "type": "string",
                        "maxLength": 16
                    },
                    "addressLatitude": {
                        "description": "Branch address latitude",
                        "type": "number",
                        "format": "double"
                    },
                    "addressLongitude": {
                        "description": "Branch address longitude",
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "code",
                    "path",
                    "name",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedBranch": {
                "description": "An array of branches",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/branch"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "dismissalPostRequest": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "description": "Application ID",
                        "type": "number",
                        "format": "int64"
                    },
                    "date": {
                        "description": "Date of the dismissal",
                        "type": "string",
                        "format": "date"
                    },
                    "reason": {
                        "description": "Reason of the dismissal",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "no_cause_employer_dismissal",
                            "contract_termination_dismissal",
                            "early_contract_termination_by_employer_dismissal",
                            "voluntary_dismissal",
                            "other"
                        ]
                    },
                    "isRehired": {
                        "description": "If the employee will be rehired",
                        "type": "boolean"
                    },
                    "rehiringReason": {
                        "description": "Reason of the rehiring",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "hired_intern",
                            "partnership",
                            "other"
                        ]
                    }
                },
                "required": [
                    "applicationId",
                    "date",
                    "reason",
                    "isRehired"
                ]
            },
            "dismissalPutRequest": {
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "Reason of the dismissal",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "no_cause_employer_dismissal",
                            "contract_termination_dismissal",
                            "early_contract_termination_by_employer_dismissal",
                            "voluntary_dismissal",
                            "other"
                        ]
                    },
                    "isRehired": {
                        "description": "If the employee will be rehired",
                        "type": "boolean"
                    },
                    "rehiringReason": {
                        "description": "Reason of the rehiring",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "hired_intern",
                            "partnership",
                            "other"
                        ]
                    }
                }
            },
            "dismissal": {
                "type": "object",
                "description": "Dismissal",
                "properties": {
                    "id": {
                        "description": "Dismissal ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "applicationId": {
                        "description": "Application ID",
                        "type": "number",
                        "format": "int64"
                    },
                    "date": {
                        "description": "Date of the dismissal",
                        "type": "string",
                        "format": "date"
                    },
                    "reason": {
                        "description": "Reason of the dismissal",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "no_cause_employer_dismissal",
                            "contract_termination_dismissal",
                            "early_contract_termination_by_employer_dismissal",
                            "voluntary_dismissal",
                            "other"
                        ]
                    },
                    "isRehired": {
                        "description": "If the employee will be rehired",
                        "type": "boolean"
                    },
                    "rehiringReason": {
                        "description": "Reason of the rehiring",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "hired_intern",
                            "partnership",
                            "other"
                        ]
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "applicationId",
                    "date",
                    "reason",
                    "isRehired",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedDismissal": {
                "description": "An array of dismissals",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/dismissal"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "emailTemplate": {
                "type": "object",
                "description": "E-mail template",
                "properties": {
                    "id": {
                        "description": "E-mail Template ID",
                        "type": "string",
                        "maxLength": 255
                    },
                    "name": {
                        "description": "Name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "subject": {
                        "description": "Subject",
                        "type": "string",
                        "maxLength": 255
                    },
                    "body": {
                        "description": "E-mail body",
                        "type": "string",
                        "maxLength": 1073741824
                    },
                    "type": {
                        "description": "Template type",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "interview_scheduling",
                            "canceled_role",
                            "invite_to_other_job",
                            "process_engagement",
                            "hiring_feedback",
                            "negative_feedback",
                            "test_or_challenge",
                            "internal_recruitment_survey"
                        ]
                    }
                },
                "required": [
                    "id",
                    "name",
                    "subject",
                    "body",
                    "type",
                    "public",
                    "userId",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedEmailTemplate": {
                "description": "An array of e-mail templates",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/emailTemplate"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "companyEmployeePostRequest": {
                "description": "Post request body",
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyEmployeeInput"
                        }
                    }
                }
            },
            "companyEmployeePostResponse": {
                "description": "Post response body",
                "type": "object",
                "properties": {
                    "employees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyEmployee"
                        }
                    }
                }
            },
            "deleteCompanyEmployeeResponse": {
                "type": "object",
                "properties": {
                    "employeeDeleted": {
                        "type": "boolean"
                    }
                }
            },
            "paginatedCompanyEmployee": {
                "description": "Get response body",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyEmployee"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "employees"
                ]
            },
            "CompanyEmployee": {
                "description": "Company employee data",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Id of the Company employee",
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "description": "Company employee name",
                        "type": "string",
                        "maxLength": 150
                    },
                    "countryOfOrigin": {
                        "description": "Company employee country",
                        "type": "string",
                        "maxLength": 32
                    },
                    "identificationDocument": {
                        "description": "Company employee identification document",
                        "type": "string",
                        "maxLength": 32
                    },
                    "companyId": {
                        "description": "Id of the Company",
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "CompanyEmployeeInput": {
                "description": "Company employee data",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Company employee name",
                        "type": "string",
                        "maxLength": 150
                    },
                    "countryOfOrigin": {
                        "description": "Company employee country",
                        "type": "string",
                        "maxLength": 32
                    },
                    "identificationDocument": {
                        "description": "Company employee identification document",
                        "type": "string",
                        "maxLength": 32
                    }
                },
                "required": [
                    "name",
                    "countryOfOrigin",
                    "identificationDocument"
                ]
            },
            "classifierPostRequest": {
                "description": "Classifier data for creation",
                "type": "object",
                "properties": {
                    "userId": {
                        "description": "Company user Id",
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "description": "Classifier type",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "approver",
                            "qualifier"
                        ]
                    }
                },
                "required": [
                    "userId",
                    "type"
                ]
            },
            "classifier": {
                "description": "Classifier data",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Id of the classifier",
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "description": "Classifier type",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "approver",
                            "qualifier"
                        ]
                    },
                    "user": {
                        "description": "Company user information",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Company user Id",
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "description": "Company user name",
                                "type": "string",
                                "maxLength": 255
                            }
                        }
                    }
                }
            },
            "paginatedClassifiers": {
                "description": "An array of classifiers",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/classifier"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "performanceEvaluationPostRequest": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "description": "Application ID",
                        "type": "number",
                        "format": "int64"
                    },
                    "date": {
                        "description": "Date of the performance evaluation",
                        "type": "string",
                        "format": "date"
                    },
                    "value": {
                        "description": "Value of the performance evaluation",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "high",
                            "medium",
                            "low"
                        ]
                    }
                },
                "required": [
                    "applicationId",
                    "date",
                    "value"
                ]
            },
            "performanceEvaluationPutRequest": {
                "type": "object",
                "properties": {
                    "value": {
                        "description": "Value of the performance evaluation",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "high",
                            "medium",
                            "low"
                        ]
                    }
                }
            },
            "performanceEvaluation": {
                "type": "object",
                "description": "Performance Evaluation",
                "properties": {
                    "id": {
                        "description": "Performance Evaluation ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "applicationId": {
                        "description": "Application ID",
                        "type": "number",
                        "format": "int64"
                    },
                    "date": {
                        "description": "Date of the performance evaluation",
                        "type": "string",
                        "format": "date"
                    },
                    "value": {
                        "description": "Value of the performance evaluation",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "high",
                            "medium",
                            "low"
                        ]
                    },
                    "createdAt": {
                        "description": "Data of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "applicationId",
                    "date",
                    "value",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedPerformanceEvaluation": {
                "description": "An array of performance evaluations",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/performanceEvaluation"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "vacancyPutRequest": {
                "type": "object",
                "description": "Vacancy to be updated",
                "properties": {
                    "code": {
                        "description": "Vacancy code (eg. COD123)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Vacancy status",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "valid",
                            "invalid",
                            "error",
                            "waiting"
                        ]
                    },
                    "errorMessage": {
                        "description": "Error message when status=error (eg. Gestor inválido)",
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "required": [
                    "code",
                    "status"
                ]
            },
            "vacancyPostRequest": {
                "type": "object",
                "description": "Vacancy to be created",
                "properties": {
                    "code": {
                        "description": "Vacancy code (eg. COD123)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Vacancy status",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "valid",
                            "waiting"
                        ]
                    }
                },
                "required": [
                    "code",
                    "status"
                ]
            },
            "vacancy": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Vacancy ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "code": {
                        "description": "Vacancy code (eg. COD123)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "status": {
                        "description": "Vacancy status",
                        "type": "string",
                        "maxLength": 32,
                        "enum": [
                            "valid",
                            "invalid",
                            "error",
                            "waiting"
                        ]
                    },
                    "errorMessage": {
                        "description": "Error message when status=error (eg. Gestor inválido)",
                        "type": "string",
                        "maxLength": 255
                    },
                    "createdAt": {
                        "description": "Vacancy creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Vacancy update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "code",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "paginatedVacancy": {
                "description": "An array of vacancies",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/vacancy"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            },
            "webhookPostRequest": {
                "type": "object",
                "properties": {
                    "action": {
                        "description": "Webhook action to watch",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "application.created",
                            "application.completed",
                            "application.moved",
                            "application.assigned",
                            "application.pre-hiring-info-filled",
                            "candidate.hired",
                            "job.changed",
                            "job.published",
                            "job.status-changed",
                            "pre-employee.moved",
                            "pre-employee.admission-concluded"
                        ]
                    },
                    "status": {
                        "description": "Subscription status (defaults to active).",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "active",
                            "inactive"
                        ]
                    },
                    "techOwnerName": {
                        "description": "Technical responsible for the subscription",
                        "type": "string",
                        "maxLength": 255
                    },
                    "techOwnerEmail": {
                        "description": "Email of the technical responsible",
                        "type": "string",
                        "maxLength": 255
                    },
                    "postbackUrl": {
                        "description": "Url to be called when webhook is fired",
                        "type": "string",
                        "maxLength": 2048
                    },
                    "clientHeaders": {
                        "description": "Headers to be included on the request ({ \"myCustomHeader\": \"myExpectedValue \"})",
                        "type": "object"
                    }
                },
                "required": [
                    "action",
                    "postBackUrl"
                ]
            },
            "webhook": {
                "type": "object",
                "description": "Webhook",
                "properties": {
                    "id": {
                        "description": "Webhook ID",
                        "type": "string",
                        "maxLength": 255
                    },
                    "action": {
                        "description": "Webhook action to watch",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "application.created",
                            "application.completed",
                            "application.moved",
                            "application.assigned",
                            "application.pre-hiring-info-filled",
                            "candidate.hired",
                            "job.changed",
                            "job.published",
                            "job.status-changed",
                            "pre-employee.moved",
                            "pre-employee.admission-concluded"
                        ]
                    },
                    "status": {
                        "description": "Subscription status (defaults to active).",
                        "type": "string",
                        "maxLength": 255,
                        "enum": [
                            "active",
                            "inactive"
                        ]
                    },
                    "techOwnerName": {
                        "description": "Technical responsible for the subscription",
                        "type": "string",
                        "maxLength": 255
                    },
                    "techOwnerEmail": {
                        "description": "Email of the technical responsible",
                        "type": "string",
                        "maxLength": 255
                    },
                    "postbackUrl": {
                        "description": "Url to be called when webhook is fired",
                        "type": "string",
                        "maxLength": 2048
                    },
                    "clientHeaders": {
                        "description": "Headers to be included on the request ({ \"myCustomHeader\": \"myExpectedValue \"})",
                        "type": "object"
                    }
                },
                "required": [
                    "id",
                    "action",
                    "postbackUrl"
                ]
            },
            "paginatedWebhook": {
                "description": "An array of webhooks",
                "type": "object",
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/webhook"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "required": [
                    "results"
                ]
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer"
            }
        },
        "parameters": {
            "page": {
                "in": "query",
                "name": "page",
                "description": "**Pagination**: Which page to query",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "default": 1
                }
            },
            "perPage": {
                "in": "query",
                "name": "perPage",
                "description": "**Pagination**: How many items per page",
                "schema": {
                    "type": "integer",
                    "format": "int64",
                    "default": 10
                }
            }
        },
        "headers": {
            "X-RateLimit-Limit": {
                "schema": {
                    "type": "integer"
                },
                "description": "Request limit per hour."
            },
            "X-RateLimit-Remaining": {
                "description": "The number of requests left for the time window.",
                "schema": {
                    "type": "integer"
                }
            },
            "X-RateLimit-Reset": {
                "schema": {
                    "type": "integer"
                },
                "description": "The UTC timestamp at which the current rate limit window resets"
            }
        },
        "responses": {
            "Unauthorized": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            },
            "Forbidden": {
                "description": "Forbidden",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            },
            "BadRequest": {
                "description": "BadRequest / Invalid Input",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            },
            "NotFound": {
                "description": "NotFound / Resource not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/errorResponse"
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            },
            "Conflict": {
                "description": "Conflict",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "description": "A short, human-readable summary of the problem type",
                                    "type": "string"
                                },
                                "detail": {
                                    "description": "A human-readable explanation specific to this occurrence of the problem",
                                    "type": "string"
                                },
                                "status": {
                                    "description": "The HTTP status code generated for this occurrence of the problem",
                                    "type": "integer"
                                },
                                "data": {
                                    "description": "Additional information about the error",
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            },
            "TooManyRequests": {
                "description": "The number of allowed requests in a given time window has exceeded the allowed limit, try again after X-RateLimit-Reset unix timestamp",
                "content": {
                    "text/html": {
                        "schema": {
                            "type": "string",
                            "example": "Too many requests, please try again later."
                        }
                    }
                },
                "headers": {
                    "X-RateLimit-Limit": {
                        "$ref": "#/components/headers/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#/components/headers/X-RateLimit-Remaining"
                    },
                    "X-RateLimit-Reset": {
                        "$ref": "#/components/headers/X-RateLimit-Reset"
                    }
                }
            }
        }
    },
    "tags": [],
    "x-readme": {
        "explorer-enabled": true,
        "proxy-enabled": true,
        "samples-enabled": true
    },
    "_id": "5cc1c252b199cf000ec09254"
}